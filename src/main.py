
import numpy as np
from ball_physics import Ball, Surface
from simulation import Simulation, MultiballSimulation
from visualization import plot_all_results, create_animation, create_multiball_animation
import matplotlib.pyplot as plt


SPEED_OF_LIGHT = 3e8
MAX_REASONABLE_SPEED = 100
MAX_REASONABLE_MASS = 1000
MIN_REASONABLE_MASS = 0.001
MAX_REASONABLE_RADIUS = 10
MIN_REASONABLE_RADIUS = 0.001
MAX_REASONABLE_TIME = 3600
MAX_FRICTION_COEFF = 2.0
MIN_DENSITY = 10
MAX_DENSITY = 22000


def check_density(mass, radius):
    volume = (4/3) * np.pi * radius**3
    density = mass / volume
    
    if density < MIN_DENSITY:
        return f"–ü–ª–æ—Ç–Ω–æ—Å—Ç—å {density:.1f} –∫–≥/–º¬≥ —Å–ª–∏—à–∫–æ–º –º–∞–ª–∞! (< {MIN_DENSITY} –∫–≥/–º¬≥ - –ª–µ–≥—á–µ –≤–æ–∑–¥—É—Ö–∞)"
    if density > MAX_DENSITY:
        return f"–ü–ª–æ—Ç–Ω–æ—Å—Ç—å {density:.1f} –∫–≥/–º¬≥ —Å–ª–∏—à–∫–æ–º –≤–µ–ª–∏–∫–∞! (> {MAX_DENSITY} –∫–≥/–º¬≥ - –±–æ–ª—å—à–µ –æ—Å–º–∏—è)"
    
    return True


def check_speed_physical(v):
    if v > SPEED_OF_LIGHT:
        return f"–°–∫–æ—Ä–æ—Å—Ç—å {v:.2e} –º/—Å –±–æ–ª—å—à–µ —Å–∫–æ—Ä–æ—Å—Ç–∏ —Å–≤–µ—Ç–∞ ({SPEED_OF_LIGHT:.2e} –º/—Å)! –†–µ–ª—è—Ç–∏–≤–∏—Å—Ç—Å–∫–∏–µ —ç—Ñ—Ñ–µ–∫—Ç—ã –Ω–µ —É—á—Ç–µ–Ω—ã."
    if v > MAX_REASONABLE_SPEED:
        return f"–°–∫–æ—Ä–æ—Å—Ç—å {v:.1f} –º/—Å —Å–ª–∏—à–∫–æ–º –≤–µ–ª–∏–∫–∞ –¥–ª—è –º–∞–∫—Ä–æ—Å–∫–æ–ø–∏—á–µ—Å–∫–æ–≥–æ —à–∞—Ä–∞! (—Ä–∞–∑—É–º–Ω—ã–π –º–∞–∫—Å–∏–º—É–º: {MAX_REASONABLE_SPEED} –º/—Å)"
    return True


def input_float(prompt, default=None, min_val=None, max_val=None, physical_check=None):
    while True:
        try:
            if default is not None:
                user_input = input(f"{prompt} (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é {default}): ").strip()
                value = float(user_input) if user_input else default
            else:
                value = float(input(f"{prompt}: "))
            
            if min_val is not None and value < min_val:
                print(f"‚ùå –ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å >= {min_val}")
                continue
            if max_val is not None and value > max_val:
                print(f"‚ùå –ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å <= {max_val}")
                continue
            
            if physical_check is not None:
                check_result = physical_check(value)
                if check_result is not True:
                    print(f"‚ùå {check_result}")
                    continue
            
            return value
        except ValueError:
            print("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ")


def input_yes_no(prompt, default=True):
    default_str = "–¥" if default else "–Ω"
    while True:
        response = input(f"{prompt} (–¥/–Ω, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é {default_str}): ").strip().lower()
        if not response:
            return default
        if response in ['–¥', '–¥–∞', 'y', 'yes']:
            return True
        if response in ['–Ω', '–Ω–µ—Ç', 'n', 'no']:
            return False
        print("‚ùå –í–≤–µ–¥–∏—Ç–µ '–¥' –∏–ª–∏ '–Ω'")


def scenario1_incline():
    print("\n" + "="*70)
    print("–°–¶–ï–ù–ê–†–ò–ô 1: –°–∫–∞—Ç—ã–≤–∞–Ω–∏–µ –ø–æ –Ω–∞–∫–ª–æ–Ω–Ω–æ–π –ø–ª–æ—Å–∫–æ—Å—Ç–∏")
    print("="*70)
    
    print("\nüìã –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —à–∞—Ä–∞:")
    mass = input_float("  –ú–∞—Å—Å–∞ (–∫–≥)", default=1.0, 
                       min_val=MIN_REASONABLE_MASS, max_val=MAX_REASONABLE_MASS)
    radius = input_float("  –†–∞–¥–∏—É—Å (–º)", default=0.1, 
                        min_val=MIN_REASONABLE_RADIUS, max_val=MAX_REASONABLE_RADIUS)
    
    density_check = check_density(mass, radius)
    if density_check is not True:
        print(f"   ‚ö†Ô∏è  {density_check}")
        volume = (4/3) * np.pi * radius**3
        density = mass / volume
        print(f"   üí° –°–ø—Ä–∞–≤–∫–∞: –≤–æ–¥–∞ ‚âà 1000 –∫–≥/–º¬≥, —Å—Ç–∞–ª—å ‚âà 7800 –∫–≥/–º¬≥")
    
    print("\nüìã –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏:")
    angle = input_float("  –£–≥–æ–ª –Ω–∞–∫–ª–æ–Ω–∞ (–≥—Ä–∞–¥—É—Å—ã)", default=30.0, min_val=0.0, max_val=89.0)
    
    if angle > 75:
        print(f"   ‚ö†Ô∏è  –£–≥–æ–ª {angle}¬∞ –æ—á–µ–Ω—å –∫—Ä—É—Ç–æ–π!")
    
    friction = input_float("  –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Ç—Ä–µ–Ω–∏—è", default=0.5, 
                          min_val=0.0, max_val=MAX_FRICTION_COEFF)
    
    if friction > 1.0:
        print(f"   üí° Œº = {friction:.2f} > 1 (—Ä–µ–∑–∏–Ω–∞ –∏–ª–∏ –∫–ª–µ–π–∫–∏–µ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏)")
    
    print("\nüìã –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–∏–º—É–ª—è—Ü–∏–∏:")
    total_time = input_float("  –í—Ä–µ–º—è —Å–∏–º—É–ª—è—Ü–∏–∏ (—Å–µ–∫)", default=3.0, 
                            min_val=0.01, max_val=MAX_REASONABLE_TIME)
    
    ball = Ball(
        mass=mass,
        radius=radius,
        position=np.array([0.0, 0.0]),
        velocity=np.array([0.0, 0.0]),
        angular_velocity=np.array([0.0, 0.0, 0.0])
    )
    
    surface = Surface(friction_coeff=friction, angle=angle)
    
    print("\n‚è≥ –ó–∞–ø—É—Å–∫ —Å–∏–º—É–ª—è—Ü–∏–∏...")
    sim = Simulation(ball, surface, dt=0.01, total_time=total_time)
    sim.run()
    
    results = sim.get_results()
    
    print("\n‚úÖ –°–∏–º—É–ª—è—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print(f"   üìç –ù–∞—á–∞–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è: {results['position'][0]}")
    print(f"   üìç –ö–æ–Ω–µ—á–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è: {results['position'][-1]}")
    print(f"   üöÄ –ö–æ–Ω–µ—á–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å: {np.linalg.norm(results['velocity'][-1]):.2f} –º/—Å")
    print(f"   ‚ö° –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —ç–Ω–µ—Ä–≥–∏–∏: {'‚úÖ –î–∞' if sim.check_energy_conservation() else '‚ùå –ù–µ—Ç'}")
    
    if any(results['is_slipping']):
        print(f"   ‚ö†Ô∏è  –ë—ã–ª –ø–µ—Ä–µ—Ö–æ–¥ –≤ —Ä–µ–∂–∏–º –ø—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏—è!")
    else:
        print(f"   ‚úÖ –ö–∞—á–µ–Ω–∏–µ –±–µ–∑ –ø—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏—è")
    
    if input_yes_no("\nüìä –ü–æ–∫–∞–∑–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫–∏?", default=True):
        plot_all_results(results, mass, radius, surface_angle=angle)
        plt.show()


def scenario2_slipping():
    print("\n" + "="*70)
    print("–°–¶–ï–ù–ê–†–ò–ô 2: –ü–µ—Ä–µ—Ö–æ–¥ –≤ —Ä–µ–∂–∏–º –ø—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏—è")
    print("="*70)
    
    print("\nüí° –°–ü–†–ê–í–ö–ê:")
    print("   –ü—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∫–æ–≥–¥–∞: tan(Œ∏) > (7/2) √ó Œº")
    print("   –î–ª—è —É–≥–ª–∞ 45¬∞ –Ω—É–∂–Ω–æ Œº < 0.20")
    print("   –î–ª—è —É–≥–ª–∞ 60¬∞ –Ω—É–∂–Ω–æ Œº < 0.25")
    
    print("\nüìã –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —à–∞—Ä–∞:")
    mass = input_float("  –ú–∞—Å—Å–∞ (–∫–≥)", default=1.0, min_val=0.01)
    radius = input_float("  –†–∞–¥–∏—É—Å (–º)", default=0.1, min_val=0.01)
    
    print("\nüìã –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏:")
    angle = input_float("  –£–≥–æ–ª –Ω–∞–∫–ª–æ–Ω–∞ (–≥—Ä–∞–¥—É—Å—ã)", default=45.0, min_val=10.0, max_val=90.0)
    
    angle_rad = np.radians(angle)
    mu_critical = (2.0/7.0) * np.tan(angle_rad)
    
    print(f"\nüí° –î–ª—è —É–≥–ª–∞ {angle}¬∞:")
    print(f"   –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π Œº = {mu_critical:.3f}")
    print(f"   –ü—Ä–∏ Œº < {mu_critical:.3f} –±—É–¥–µ—Ç –ø—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏–µ")
    print(f"   –ü—Ä–∏ Œº ‚â• {mu_critical:.3f} –±—É–¥–µ—Ç –∫–∞—á–µ–Ω–∏–µ –±–µ–∑ –ø—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏—è")
    
    friction = input_float(f"  –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Ç—Ä–µ–Ω–∏—è (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è < {mu_critical:.2f})", 
                          default=0.1, min_val=0.0, max_val=1.0)
    
    will_slip = friction < mu_critical
    print(f"\nüîÆ –ü—Ä–æ–≥–Ω–æ–∑: {'‚ö†Ô∏è  –ë–£–î–ï–¢ –ø—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏–µ' if will_slip else '‚úÖ –ö–∞—á–µ–Ω–∏–µ –±–µ–∑ –ø—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏—è'}")
    
    print("\nüìã –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–∏–º—É–ª—è—Ü–∏–∏:")
    total_time = input_float("  –í—Ä–µ–º—è —Å–∏–º—É–ª—è—Ü–∏–∏ (—Å–µ–∫)", default=2.0, min_val=0.1)
    
    ball = Ball(
        mass=mass,
        radius=radius,
        position=np.array([0.0, 0.0]),
        velocity=np.array([0.0, 0.0]),
        angular_velocity=np.array([0.0, 0.0, 0.0])
    )
    
    surface = Surface(friction_coeff=friction, angle=angle)
    
    print("\n‚è≥ –ó–∞–ø—É—Å–∫ —Å–∏–º—É–ª—è—Ü–∏–∏...")
    sim = Simulation(ball, surface, dt=0.01, total_time=total_time)
    sim.run()
    
    results = sim.get_results()
    
    print("\n‚úÖ –°–∏–º—É–ª—è—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print(f"   üìç –ü—Ä–æ–π–¥–µ–Ω–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {results['position'][-1][0]:.2f} –º")
    print(f"   üöÄ –ö–æ–Ω–µ—á–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å: {np.linalg.norm(results['velocity'][-1]):.2f} –º/—Å")
    
    slipping_count = np.sum(results['is_slipping'])
    total_count = len(results['is_slipping'])
    slipping_percent = (slipping_count / total_count) * 100 if total_count > 0 else 0
    
    print(f"\nüìä –ê–ù–ê–õ–ò–ó –†–ï–ñ–ò–ú–ê –î–í–ò–ñ–ï–ù–ò–Ø:")
    if slipping_count > 0:
        print(f"   ‚ö†Ô∏è  –ü—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏–µ: {slipping_percent:.1f}% –≤—Ä–µ–º–µ–Ω–∏")
        print(f"   ‚úÖ –ö–∞—á–µ–Ω–∏–µ: {100-slipping_percent:.1f}% –≤—Ä–µ–º–µ–Ω–∏")
    else:
        print(f"   ‚úÖ –ö–∞—á–µ–Ω–∏–µ –±–µ–∑ –ø—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏—è –Ω–∞ –≤—Å—ë–º –ø—Ä–æ—Ç—è–∂–µ–Ω–∏–∏")
    
    if will_slip:
        a_slip = 9.81 * (np.sin(angle_rad) - friction * np.cos(angle_rad))
        print(f"\nüìê –¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–æ–µ —É—Å–∫–æ—Ä–µ–Ω–∏–µ (–ø—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏–µ): {a_slip:.2f} –º/—Å¬≤")
    else:
        a_roll = (5.0/7.0) * 9.81 * np.sin(angle_rad)
        print(f"\nüìê –¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–æ–µ —É—Å–∫–æ—Ä–µ–Ω–∏–µ (–∫–∞—á–µ–Ω–∏–µ): {a_roll:.2f} –º/—Å¬≤")
    
    if input_yes_no("\nüìä –ü–æ–∫–∞–∑–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫–∏?", default=True):
        plot_all_results(results, mass, radius, surface_angle=angle)
        plt.show()


def scenario3_horizontal():
    print("\n" + "="*70)
    print("–°–¶–ï–ù–ê–†–ò–ô 3: –ö–∞—á–µ–Ω–∏–µ –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–π –ø–ª–æ—Å–∫–æ—Å—Ç–∏")
    print("="*70)
    
    print("\nüìã –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —à–∞—Ä–∞:")
    mass = input_float("  –ú–∞—Å—Å–∞ (–∫–≥)", default=0.5, 
                       min_val=MIN_REASONABLE_MASS, max_val=MAX_REASONABLE_MASS)
    radius = input_float("  –†–∞–¥–∏—É—Å (–º)", default=0.05, 
                        min_val=MIN_REASONABLE_RADIUS, max_val=MAX_REASONABLE_RADIUS)
    
    density_check = check_density(mass, radius)
    if density_check is not True:
        print(f"   ‚ö†Ô∏è  {density_check}")
    
    print("\nüìã –ù–∞—á–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å:")
    vx = input_float("  –°–∫–æ—Ä–æ—Å—Ç—å –ø–æ X (–º/—Å)", default=3.0, 
                     min_val=-MAX_REASONABLE_SPEED, max_val=MAX_REASONABLE_SPEED,
                     physical_check=lambda v: check_speed_physical(abs(v)))
    vy = input_float("  –°–∫–æ—Ä–æ—Å—Ç—å –ø–æ Y (–º/—Å)", default=2.0, 
                     min_val=-MAX_REASONABLE_SPEED, max_val=MAX_REASONABLE_SPEED,
                     physical_check=lambda v: check_speed_physical(abs(v)))
    
    v_total = np.sqrt(vx**2 + vy**2)
    if v_total > 50:
        print(f"   ‚ö†Ô∏è  –í—ã—Å–æ–∫–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å {v_total:.1f} –º/—Å ({v_total*3.6:.1f} –∫–º/—á)!")
    
    print("\nüìã –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏:")
    friction = input_float("  –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Ç—Ä–µ–Ω–∏—è", default=0.3, 
                          min_val=0.0, max_val=MAX_FRICTION_COEFF)
    
    print("\nüìã –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–∏–º—É–ª—è—Ü–∏–∏:")
    total_time = input_float("  –í—Ä–µ–º—è —Å–∏–º—É–ª—è—Ü–∏–∏ (—Å–µ–∫)", default=5.0, 
                            min_val=0.01, max_val=MAX_REASONABLE_TIME)
    
    v_magnitude = np.sqrt(vx**2 + vy**2)
    
    wx = vy / radius if radius > 0 else 0.0
    wy = -vx / radius if radius > 0 else 0.0
    
    ball = Ball(
        mass=mass,
        radius=radius,
        position=np.array([0.0, 0.0]),
        velocity=np.array([vx, vy]),
        angular_velocity=np.array([wx, wy, 0.0])
    )
    
    surface = Surface(friction_coeff=friction, angle=0.0)
    
    print("\n‚è≥ –ó–∞–ø—É—Å–∫ —Å–∏–º—É–ª—è—Ü–∏–∏...")
    sim = Simulation(ball, surface, dt=0.01, total_time=total_time)
    sim.run()
    
    results = sim.get_results()
    
    print("\n‚úÖ –°–∏–º—É–ª—è—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print(f"   üöÄ –ù–∞—á–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å: {v_magnitude:.2f} –º/—Å")
    print(f"   üöÄ –ö–æ–Ω–µ—á–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å: {np.linalg.norm(results['velocity'][-1]):.2f} –º/—Å")
    print(f"   üìè –ü—Ä–æ–π–¥–µ–Ω–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {np.linalg.norm(results['position'][-1] - results['position'][0]):.2f} –º")
    
    if input_yes_no("\nüìä –ü–æ–∫–∞–∑–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫–∏?", default=True):
        plot_all_results(results, mass, radius, surface_angle=0.0)
        plt.show()


def scenario4_wall_collisions():
    print("\n" + "="*70)
    print("–°–¶–ï–ù–ê–†–ò–ô 4: –°—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏—è —Å–æ —Å—Ç–µ–Ω–∞–º–∏")
    print("="*70)
    
    print("\nüìã –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —à–∞—Ä–∞:")
    mass = input_float("  –ú–∞—Å—Å–∞ (–∫–≥)", default=0.5, min_val=0.01)
    radius = input_float("  –†–∞–¥–∏—É—Å (–º)", default=0.05, min_val=0.01)
    
    print("\nüìã –ù–∞—á–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å:")
    vx = input_float("  –°–∫–æ—Ä–æ—Å—Ç—å –ø–æ X (–º/—Å)", default=2.0)
    vy = input_float("  –°–∫–æ—Ä–æ—Å—Ç—å –ø–æ Y (–º/—Å)", default=1.5)
    
    print("\nüìã –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏:")
    friction = input_float("  –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Ç—Ä–µ–Ω–∏—è", default=0.1, min_val=0.0, max_val=1.0)
    
    print("\nüìã –ì—Ä–∞–Ω–∏—Ü—ã –æ–±–ª–∞—Å—Ç–∏ (—Å—Ç–µ–Ω—ã):")
    boundary = input_float("  –†–∞–∑–º–µ—Ä –æ–±–ª–∞—Å—Ç–∏ (¬±–º–µ—Ç—Ä—ã)", default=2.0, min_val=0.5)
    
    print("\nüìã –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏–π:")
    restitution = input_float("  –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è (0-1)", default=0.9, min_val=0.0, max_val=1.0)
    
    print("\nüìã –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–∏–º—É–ª—è—Ü–∏–∏:")
    total_time = input_float("  –í—Ä–µ–º—è —Å–∏–º—É–ª—è—Ü–∏–∏ (—Å–µ–∫)", default=10.0, min_val=0.1)
    
    wx = vy / radius if radius > 0 else 0.0
    wy = -vx / radius if radius > 0 else 0.0
    
    ball = Ball(
        mass=mass,
        radius=radius,
        position=np.array([0.0, 0.0]),
        velocity=np.array([vx, vy]),
        angular_velocity=np.array([wx, wy, 0.0])
    )
    
    surface = Surface(friction_coeff=friction, angle=0.0, bounds=[-boundary, boundary, -boundary, boundary])
    
    walls = [
        {'position': boundary, 'axis': 0},
        {'position': -boundary, 'axis': 0},
        {'position': boundary, 'axis': 1},
        {'position': -boundary, 'axis': 1}
    ]
    
    print("\n‚è≥ –ó–∞–ø—É—Å–∫ —Å–∏–º—É–ª—è—Ü–∏–∏...")
    sim = Simulation(ball, surface, dt=0.01, total_time=total_time)
    sim.run(walls=walls, restitution=restitution)
    
    results = sim.get_results()
    
    print("\n‚úÖ –°–∏–º—É–ª—è—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print(f"   ‚ö° –ù–∞—á–∞–ª—å–Ω–∞—è —ç–Ω–µ—Ä–≥–∏—è: {results['energy'][0]:.3f} –î–∂")
    print(f"   ‚ö° –ö–æ–Ω–µ—á–Ω–∞—è —ç–Ω–µ—Ä–≥–∏—è: {results['energy'][-1]:.3f} –î–∂")
    print(f"   üìâ –ü–æ—Ç–µ—Ä—è —ç–Ω–µ—Ä–≥–∏–∏: {(1 - results['energy'][-1]/results['energy'][0])*100:.1f}%")
    
    if input_yes_no("\nüìä –ü–æ–∫–∞–∑–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫–∏?", default=True):
        plot_all_results(results, mass, radius, surface_angle=0.0)
        
        if input_yes_no("üé¨ –ü–æ–∫–∞–∑–∞—Ç—å –∞–Ω–∏–º–∞—Ü–∏—é?", default=True):
            anim = create_animation(results, radius, surface_angle=0.0, walls=walls)
            plt.show()
        else:
            plt.show()


def scenario5_multiple_balls():
    print("\n" + "="*70)
    print("–°–¶–ï–ù–ê–†–ò–ô 5: –°—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —à–∞—Ä–æ–≤")
    print("="*70)
    
    print("\nüìã –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞—Ä–æ–≤:")
    n_balls = int(input_float("  –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞—Ä–æ–≤ (2-5)", default=2, min_val=2, max_val=5))
    
    balls = []
    
    for i in range(n_balls):
        print(f"\nüîµ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —à–∞—Ä–∞ {i+1}:")
        mass = input_float(f"  –ú–∞—Å—Å–∞ (–∫–≥)", default=1.0, min_val=0.01)
        radius = input_float(f"  –†–∞–¥–∏—É—Å (–º)", default=0.1, min_val=0.01)
        
        print(f"  –ù–∞—á–∞–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è:")
        x = input_float(f"    X (–º)", default=float(i - n_balls//2))
        y = input_float(f"    Y (–º)", default=0.0)
        
        print(f"  –ù–∞—á–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å:")
        vx = input_float(f"    Vx (–º/—Å)", default=1.0 if i % 2 == 0 else -1.0)
        vy = input_float(f"    Vy (–º/—Å)", default=0.0)
        
        ball = Ball(
            mass=mass,
            radius=radius,
            position=np.array([x, y]),
            velocity=np.array([vx, vy]),
            angular_velocity=np.array([0.0, 0.0, 0.0])
        )
        balls.append(ball)
    
    print("\nüìã –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å—Ä–µ–¥—ã:")
    friction = input_float("  –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Ç—Ä–µ–Ω–∏—è", default=0.05, min_val=0.0, max_val=1.0)
    boundary = input_float("  –†–∞–∑–º–µ—Ä –æ–±–ª–∞—Å—Ç–∏ (¬±–º–µ—Ç—Ä—ã)", default=3.0, min_val=0.5)
    restitution = input_float("  –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è (0-1)", default=1.0, min_val=0.0, max_val=1.0)
    total_time = input_float("  –í—Ä–µ–º—è —Å–∏–º—É–ª—è—Ü–∏–∏ (—Å–µ–∫)", default=8.0, min_val=0.1)
    
    surface = Surface(friction_coeff=friction, angle=0.0)
    
    walls = [
        {'position': boundary, 'axis': 0},
        {'position': -boundary, 'axis': 0},
        {'position': boundary, 'axis': 1},
        {'position': -boundary, 'axis': 1}
    ]
    
    print("\n‚è≥ –ó–∞–ø—É—Å–∫ —Å–∏–º—É–ª—è—Ü–∏–∏...")
    sim = MultiballSimulation(balls, surface, dt=0.01, total_time=total_time)
    sim.run(walls=walls, restitution=restitution)
    
    results = sim.get_results()
    
    print("\n‚úÖ –°–∏–º—É–ª—è—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print(f"   üîµ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞—Ä–æ–≤: {len(balls)}")
    print(f"   ‚è±Ô∏è  –í—Ä–µ–º—è —Å–∏–º—É–ª—è—Ü–∏–∏: {results['time'][-1]:.2f} —Å")
    
    if input_yes_no("\nüìä –ü–æ–∫–∞–∑–∞—Ç—å –∞–Ω–∏–º–∞—Ü–∏—é?", default=True):
        radii = [ball.radius for ball in balls]
        anim = create_multiball_animation(results, radii, walls=walls)
        plt.show()


def scenario6_custom():
    print("\n" + "="*70)
    print("–°–¶–ï–ù–ê–†–ò–ô 6: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Å—Ü–µ–Ω–∞—Ä–∏–π")
    print("="*70)
    
    print("\nüìã –¢–∏–ø –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏:")
    print("  1. –ù–∞–∫–ª–æ–Ω–Ω–∞—è –ø–ª–æ—Å–∫–æ—Å—Ç—å")
    print("  2. –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è –ø–ª–æ—Å–∫–æ—Å—Ç—å")
    
    surface_type = int(input_float("  –í—ã–±–µ—Ä–∏—Ç–µ (1-2)", default=1, min_val=1, max_val=2))
    
    print("\nüìã –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —à–∞—Ä–∞:")
    mass = input_float("  –ú–∞—Å—Å–∞ (–∫–≥)", default=1.0, min_val=0.01)
    radius = input_float("  –†–∞–¥–∏—É—Å (–º)", default=0.1, min_val=0.01)
    
    print("\nüìã –ù–∞—á–∞–ª—å–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ:")
    x0 = input_float("  X (–º)", default=0.0)
    y0 = input_float("  Y (–º)", default=0.0)
    
    print("\nüìã –ù–∞—á–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å:")
    vx0 = input_float("  Vx (–º/—Å)", default=0.0)
    vy0 = input_float("  Vy (–º/—Å)", default=0.0)
    
    print("\nüìã –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏:")
    angle = input_float("  –£–≥–æ–ª –Ω–∞–∫–ª–æ–Ω–∞ (–≥—Ä–∞–¥—É—Å—ã)", default=30.0 if surface_type == 1 else 0.0, min_val=0.0, max_val=90.0)
    friction = input_float("  –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Ç—Ä–µ–Ω–∏—è", default=0.5, min_val=0.0, max_val=1.0)
    
    add_walls = input_yes_no("\nüß± –î–æ–±–∞–≤–∏—Ç—å —Å—Ç–µ–Ω—ã?", default=False)
    
    walls = None
    restitution = 1.0
    
    if add_walls:
        boundary = input_float("  –†–∞–∑–º–µ—Ä –æ–±–ª–∞—Å—Ç–∏ (¬±–º–µ—Ç—Ä—ã)", default=5.0, min_val=0.5)
        restitution = input_float("  –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è (0-1)", default=0.9, min_val=0.0, max_val=1.0)
        walls = [
            {'position': boundary, 'axis': 0},
            {'position': -boundary, 'axis': 0},
            {'position': boundary, 'axis': 1},
            {'position': -boundary, 'axis': 1}
        ]
    
    total_time = input_float("\n‚è±Ô∏è  –í—Ä–µ–º—è —Å–∏–º—É–ª—è—Ü–∏–∏ (—Å–µ–∫)", default=5.0, min_val=0.1)
    
    wx = vy0 / radius if radius > 0 else 0.0
    wy = -vx0 / radius if radius > 0 else 0.0
    
    ball = Ball(
        mass=mass,
        radius=radius,
        position=np.array([x0, y0]),
        velocity=np.array([vx0, vy0]),
        angular_velocity=np.array([wx, wy, 0.0])
    )
    
    surface = Surface(friction_coeff=friction, angle=angle)
    
    print("\n‚è≥ –ó–∞–ø—É—Å–∫ —Å–∏–º—É–ª—è—Ü–∏–∏...")
    sim = Simulation(ball, surface, dt=0.01, total_time=total_time)
    sim.run(walls=walls, restitution=restitution)
    
    results = sim.get_results()
    
    print("\n‚úÖ –°–∏–º—É–ª—è—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print(f"   üìç –ö–æ–Ω–µ—á–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è: {results['position'][-1]}")
    print(f"   üöÄ –ö–æ–Ω–µ—á–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å: {np.linalg.norm(results['velocity'][-1]):.2f} –º/—Å")
    print(f"   ‚ö° –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —ç–Ω–µ—Ä–≥–∏–∏: {'‚úÖ –î–∞' if sim.check_energy_conservation() else '‚ùå –ù–µ—Ç'}")
    
    if input_yes_no("\nüìä –ü–æ–∫–∞–∑–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫–∏?", default=True):
        plot_all_results(results, mass, radius, surface_angle=angle)
        
        if input_yes_no("üé¨ –ü–æ–∫–∞–∑–∞—Ç—å –∞–Ω–∏–º–∞—Ü–∏—é?", default=False):
            anim = create_animation(results, radius, surface_angle=angle, walls=walls)
            plt.show()
        else:
            plt.show()


def main():
    print("\n" + "="*70)
    print("üéØ  –ú–û–î–ï–õ–ò–†–û–í–ê–ù–ò–ï –î–í–ò–ñ–ï–ù–ò–Ø –®–ê–†–ê –ü–û –ü–û–í–ï–†–•–ù–û–°–¢–ò")
    print("="*70)
    
    while True:
        print("\nüìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏:")
        print("  1. –°–∫–∞—Ç—ã–≤–∞–Ω–∏–µ –ø–æ –Ω–∞–∫–ª–æ–Ω–Ω–æ–π –ø–ª–æ—Å–∫–æ—Å—Ç–∏ (–±–µ–∑ –ø—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏—è)")
        print("  2. –ü–µ—Ä–µ—Ö–æ–¥ –≤ —Ä–µ–∂–∏–º –ø—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏—è ‚ö†Ô∏è")
        print("  3. –ö–∞—á–µ–Ω–∏–µ –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–π –ø–ª–æ—Å–∫–æ—Å—Ç–∏")
        print("  4. –°—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏—è —Å–æ —Å—Ç–µ–Ω–∞–º–∏")
        print("  5. –°—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —à–∞—Ä–æ–≤")
        print("  6. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Å—Ü–µ–Ω–∞—Ä–∏–π")
        print("  0. –í—ã—Ö–æ–¥")
        
        try:
            choice = int(input_float("\n–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ü–µ–Ω–∞—Ä–∏–π (0-6)", default=1, min_val=0, max_val=6))
            
            if choice == 0:
                print("\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                break
            elif choice == 1:
                scenario1_incline()
            elif choice == 2:
                scenario2_slipping()
            elif choice == 3:
                scenario3_horizontal()
            elif choice == 4:
                scenario4_wall_collisions()
            elif choice == 5:
                scenario5_multiple_balls()
            elif choice == 6:
                scenario6_custom()
            
            if not input_yes_no("\nüîÑ –ó–∞–ø—É—Å—Ç–∏—Ç—å –¥—Ä—É–≥–æ–π —Å—Ü–µ–Ω–∞—Ä–∏–π?", default=True):
                print("\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                break
                
        except KeyboardInterrupt:
            print("\n\nüëã –ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞. –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
            break
        except Exception as e:
            print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")
            if not input_yes_no("–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞?", default=True):
                break


if __name__ == "__main__":
    main()
