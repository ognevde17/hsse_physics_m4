
import streamlit as st
import numpy as np
import matplotlib.pyplot as plt
from src.ball_physics import Ball, Surface
from src.simulation import Simulation, MultiballSimulation
from src.visualization import plot_trajectory, plot_energy, plot_velocity, plot_angular_velocity, plot_slipping_regions, create_animation, create_multiball_animation
import io
import os
import tempfile

st.set_page_config(
    page_title="–ú–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–≤–∏–∂–µ–Ω–∏—è —à–∞—Ä–∞",
    page_icon="‚öΩ",
    layout="wide",
    initial_sidebar_state="expanded"
)

SPEED_OF_LIGHT = 3e8
MAX_REASONABLE_SPEED = 100.0
MAX_REASONABLE_MASS = 1000.0
MIN_REASONABLE_MASS = 0.001
MAX_REASONABLE_RADIUS = 10.0
MIN_REASONABLE_RADIUS = 0.001
MAX_REASONABLE_TIME = 3600.0
MAX_FRICTION_COEFF = 2.0
MIN_DENSITY = 10.0
MAX_DENSITY = 22000.0


def check_density(mass, radius):
    volume = (4/3) * np.pi * radius**3
    density = mass / volume
    
    if density < MIN_DENSITY:
        return False, f"‚ö†Ô∏è –ü–ª–æ—Ç–Ω–æ—Å—Ç—å {density:.1f} –∫–≥/–º¬≥ —Å–ª–∏—à–∫–æ–º –º–∞–ª–∞!"
    if density > MAX_DENSITY:
        return False, f"‚ö†Ô∏è –ü–ª–æ—Ç–Ω–æ—Å—Ç—å {density:.1f} –∫–≥/–º¬≥ —Å–ª–∏—à–∫–æ–º –≤–µ–ª–∏–∫–∞!"
    
    return True, f"‚úÖ –ü–ª–æ—Ç–Ω–æ—Å—Ç—å: {density:.1f} –∫–≥/–º¬≥"


def show_animation(results, ball_radius, surface_angle=0.0, walls=None):
    with tempfile.NamedTemporaryFile(delete=False, suffix='.gif') as tmp:
        anim = create_animation(results, ball_radius, surface_angle, walls, save_path=tmp.name, fps=15)
        plt.close()
        
        if os.path.exists(tmp.name):
            st.image(tmp.name)
            os.unlink(tmp.name)


def main():
    
    st.title("‚öΩ –ú–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–≤–∏–∂–µ–Ω–∏—è —à–∞—Ä–∞ –ø–æ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏")
    st.markdown("---")
    
    st.sidebar.title("üìã –í—ã–±–æ—Ä —Å—Ü–µ–Ω–∞—Ä–∏—è")
    
    scenario = st.sidebar.radio(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ü–µ–Ω–∞—Ä–∏–π:",
        [
            "1Ô∏è‚É£ –°–∫–∞—Ç—ã–≤–∞–Ω–∏–µ –ø–æ –Ω–∞–∫–ª–æ–Ω–Ω–æ–π",
            "2Ô∏è‚É£ –ü—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏–µ",
            "3Ô∏è‚É£ –ö–∞—á–µ–Ω–∏–µ –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏",
            "4Ô∏è‚É£ –°—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏—è —Å–æ —Å—Ç–µ–Ω–∞–º–∏",
            "5Ô∏è‚É£ –ù–µ—Å–∫–æ–ª—å–∫–æ —à–∞—Ä–æ–≤"
        ]
    )
    
    st.sidebar.markdown("---")
    st.sidebar.info("üí° **–ü–æ–¥—Å–∫–∞–∑–∫–∞:** –í—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–º–µ—é—Ç —Ñ–∏–∑–∏—á–µ—Å–∫–∏ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è")
    
    if "1Ô∏è‚É£" in scenario:
        scenario_1_incline()
    elif "2Ô∏è‚É£" in scenario:
        scenario_2_slipping()
    elif "3Ô∏è‚É£" in scenario:
        scenario_3_horizontal()
    elif "4Ô∏è‚É£" in scenario:
        scenario_4_walls()
    elif "5Ô∏è‚É£" in scenario:
        scenario_5_multiball()


def scenario_1_incline():
    st.header("1Ô∏è‚É£ –°–∫–∞—Ç—ã–≤–∞–Ω–∏–µ –ø–æ –Ω–∞–∫–ª–æ–Ω–Ω–æ–π –ø–ª–æ—Å–∫–æ—Å—Ç–∏")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.subheader("‚öôÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —à–∞—Ä–∞")
        mass = st.slider("–ú–∞—Å—Å–∞ (–∫–≥)", MIN_REASONABLE_MASS, MAX_REASONABLE_MASS, 1.0, 
                        help="–û—Ç 1 –≥—Ä–∞–º–º–∞ –¥–æ 1 —Ç–æ–Ω–Ω—ã")
        radius = st.slider("–†–∞–¥–∏—É—Å (–º)", MIN_REASONABLE_RADIUS, MAX_REASONABLE_RADIUS, 0.1, 
                          help="–û—Ç 1 –º–º –¥–æ 10 –º")
        
        is_valid, message = check_density(mass, radius)
        if is_valid:
            st.success(message)
        else:
            st.warning(message)
            st.info("üí° –í–æ–¥–∞ ‚âà 1000 –∫–≥/–º¬≥, —Å—Ç–∞–ª—å ‚âà 7800 –∫–≥/–º¬≥")
    
    with col2:
        st.subheader("üèîÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏")
        angle = st.slider("–£–≥–æ–ª –Ω–∞–∫–ª–æ–Ω–∞ (–≥—Ä–∞–¥—É—Å—ã)", 0.0, 89.0, 30.0,
                         help="–û—Ç –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏ –¥–æ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏")
        
        if angle > 75:
            st.warning("‚ö†Ô∏è –û—á–µ–Ω—å –∫—Ä—É—Ç–æ–π —Å–∫–ª–æ–Ω!")
        
        friction = st.slider("–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Ç—Ä–µ–Ω–∏—è", 0.0, MAX_FRICTION_COEFF, 0.5,
                            help="0 = –ª—ë–¥, 1 = —Ä–µ–∑–∏–Ω–∞")
        
        if friction > 1.0:
            st.info("üí° Œº > 1 –¥–ª—è —Ä–µ–∑–∏–Ω—ã –∏–ª–∏ –∫–ª–µ–π–∫–∏—Ö –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–µ–π")
    
    st.subheader("‚è±Ô∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–∏–º—É–ª—è—Ü–∏–∏")
    total_time = st.slider("–í—Ä–µ–º—è —Å–∏–º—É–ª—è—Ü–∏–∏ (—Å–µ–∫)", 0.1, float(MAX_REASONABLE_TIME), 3.0)
    
    if st.button("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–∏–º—É–ª—è—Ü–∏—é", type="primary"):
        run_simulation_incline(mass, radius, angle, friction, total_time)


def scenario_2_slipping():
    st.header("2Ô∏è‚É£ –ü–µ—Ä–µ—Ö–æ–¥ –≤ —Ä–µ–∂–∏–º –ø—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏—è")
    
    st.info("üí° **–°–ø—Ä–∞–≤–∫–∞:** –ü—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∫–æ–≥–¥–∞ tan(Œ∏) > (7/2) √ó Œº")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.subheader("‚öôÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —à–∞—Ä–∞")
        mass = st.slider("–ú–∞—Å—Å–∞ (–∫–≥)", MIN_REASONABLE_MASS, MAX_REASONABLE_MASS, 1.0, key="slip_mass")
        radius = st.slider("–†–∞–¥–∏—É—Å (–º)", MIN_REASONABLE_RADIUS, MAX_REASONABLE_RADIUS, 0.1, key="slip_radius")
    
    with col2:
        st.subheader("üèîÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏")
        angle = st.slider("–£–≥–æ–ª –Ω–∞–∫–ª–æ–Ω–∞ (–≥—Ä–∞–¥—É—Å—ã)", 10.0, 89.0, 45.0, key="slip_angle")
        
        angle_rad = np.radians(angle)
        mu_critical = (2.0/7.0) * np.tan(angle_rad)
        
        st.info(f"üìê –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π Œº –¥–ª—è {angle}¬∞: **{mu_critical:.3f}**")
        st.write(f"‚Ä¢ Œº < {mu_critical:.3f} ‚Üí –ø—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏–µ")
        st.write(f"‚Ä¢ Œº ‚â• {mu_critical:.3f} ‚Üí –∫–∞—á–µ–Ω–∏–µ")
        
        friction = st.slider("–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Ç—Ä–µ–Ω–∏—è", 0.0, MAX_FRICTION_COEFF, 0.1, key="slip_friction")
        
        if friction < mu_critical:
            st.error("üîÆ –ü—Ä–æ–≥–Ω–æ–∑: **–ë–£–î–ï–¢ –ø—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏–µ!**")
        else:
            st.success("üîÆ –ü—Ä–æ–≥–Ω–æ–∑: **–ö–∞—á–µ–Ω–∏–µ –±–µ–∑ –ø—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏—è**")
    
    total_time = st.slider("–í—Ä–µ–º—è —Å–∏–º—É–ª—è—Ü–∏–∏ (—Å–µ–∫)", 0.1, float(MAX_REASONABLE_TIME), 2.0, key="slip_time")
    
    if st.button("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–∏–º—É–ª—è—Ü–∏—é", type="primary", key="slip_run"):
        run_simulation_slipping(mass, radius, angle, friction, total_time)


def scenario_3_horizontal():
    st.header("3Ô∏è‚É£ –ö–∞—á–µ–Ω–∏–µ –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–π –ø–ª–æ—Å–∫–æ—Å—Ç–∏")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.subheader("‚öôÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —à–∞—Ä–∞")
        mass = st.slider("–ú–∞—Å—Å–∞ (–∫–≥)", MIN_REASONABLE_MASS, MAX_REASONABLE_MASS, 0.5, key="hor_mass")
        radius = st.slider("–†–∞–¥–∏—É—Å (–º)", MIN_REASONABLE_RADIUS, MAX_REASONABLE_RADIUS, 0.05, key="hor_radius")
        
        st.subheader("üöÄ –ù–∞—á–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å")
        vx = st.slider("–°–∫–æ—Ä–æ—Å—Ç—å –ø–æ X (–º/—Å)", -MAX_REASONABLE_SPEED, MAX_REASONABLE_SPEED, 3.0, key="hor_vx")
        vy = 0.0
        
        st.info("‚ÑπÔ∏è –ù–∞ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–π –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏ Y –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ (–≤—ã—Å–æ—Ç–∞) –Ω–µ –º–µ–Ω—è–µ—Ç—Å—è, –ø–æ—ç—Ç–æ–º—É vy = 0")
        st.metric("–°–∫–æ—Ä–æ—Å—Ç—å", f"{abs(vx):.2f} –º/—Å", f"{abs(vx)*3.6:.1f} –∫–º/—á")
        
        if abs(vx) > 50:
            st.warning(f"‚ö†Ô∏è –í—ã—Å–æ–∫–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å!")
    
    with col2:
        st.subheader("üèîÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏")
        friction = st.slider("–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Ç—Ä–µ–Ω–∏—è", 0.0, MAX_FRICTION_COEFF, 0.3, key="hor_friction")
        
        st.subheader("‚è±Ô∏è –í—Ä–µ–º—è —Å–∏–º—É–ª—è—Ü–∏–∏")
        total_time = st.slider("–í—Ä–µ–º—è (—Å–µ–∫)", 0.1, float(MAX_REASONABLE_TIME), 5.0, key="hor_time")
    
    if st.button("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–∏–º—É–ª—è—Ü–∏—é", type="primary", key="hor_run"):
        run_simulation_horizontal(mass, radius, vx, vy, friction, total_time)


def scenario_4_walls():
    st.header("4Ô∏è‚É£ –°—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏—è —Å–æ —Å—Ç–µ–Ω–∞–º–∏")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.subheader("‚öôÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —à–∞—Ä–∞")
        mass = st.slider("–ú–∞—Å—Å–∞ (–∫–≥)", MIN_REASONABLE_MASS, MAX_REASONABLE_MASS, 0.5, key="wall_mass")
        radius = st.slider("–†–∞–¥–∏—É—Å (–º)", MIN_REASONABLE_RADIUS, MAX_REASONABLE_RADIUS, 0.05, key="wall_radius")
        
        st.subheader("üöÄ –ù–∞—á–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å")
        vx = st.slider("–°–∫–æ—Ä–æ—Å—Ç—å –ø–æ X (–º/—Å)", -MAX_REASONABLE_SPEED, MAX_REASONABLE_SPEED, 2.0, key="wall_vx")
        vy = 0.0
        
        st.info("‚ÑπÔ∏è –î–≤–∏–∂–µ–Ω–∏–µ –Ω–∞ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏: vy = 0")
    
    with col2:
        st.subheader("üß± –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å—Ç–µ–Ω")
        boundary = st.slider("–†–∞–∑–º–µ—Ä –æ–±–ª–∞—Å—Ç–∏ (¬±–º–µ—Ç—Ä—ã)", 0.5, 10.0, 2.0, key="wall_boundary")
        
        st.subheader("üí• –°—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏—è")
        restitution = st.slider("–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è", 0.0, 1.0, 0.9,
                               help="0 = –Ω–µ—É–ø—Ä—É–≥–∏–π, 1 = —É–ø—Ä—É–≥–∏–π", key="wall_rest")
        
        friction = st.slider("–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Ç—Ä–µ–Ω–∏—è", 0.0, MAX_FRICTION_COEFF, 0.1, key="wall_friction")
        
        st.subheader("‚è±Ô∏è –í—Ä–µ–º—è")
        total_time = st.slider("–í—Ä–µ–º—è (—Å–µ–∫)", 0.1, float(MAX_REASONABLE_TIME), 10.0, key="wall_time")
    
    if st.button("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–∏–º—É–ª—è—Ü–∏—é", type="primary", key="wall_run"):
        walls = [
            {'position': boundary, 'axis': 0},
            {'position': -boundary, 'axis': 0},
            {'position': boundary, 'axis': 1},
            {'position': -boundary, 'axis': 1}
        ]
        run_simulation_walls(mass, radius, vx, vy, friction, boundary, walls, restitution, total_time)


def scenario_5_multiball():
    st.header("5Ô∏è‚É£ –°—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —à–∞—Ä–æ–≤")
    
    n_balls = st.slider("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞—Ä–æ–≤", 2, 5, 2, key="multi_n")
    
    st.warning("‚ö†Ô∏è –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è: –≤—Å–µ —à–∞—Ä—ã —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.subheader("‚öôÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —à–∞—Ä–æ–≤")
        mass = st.slider("–ú–∞—Å—Å–∞ (–∫–≥)", MIN_REASONABLE_MASS, MAX_REASONABLE_MASS, 1.0, key="multi_mass")
        radius = st.slider("–†–∞–¥–∏—É—Å (–º)", MIN_REASONABLE_RADIUS, MAX_REASONABLE_RADIUS, 0.1, key="multi_radius")
    
    with col2:
        st.subheader("üåê –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å—Ä–µ–¥—ã")
        friction = st.slider("–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Ç—Ä–µ–Ω–∏—è", 0.0, MAX_FRICTION_COEFF, 0.05, key="multi_friction")
        boundary = st.slider("–†–∞–∑–º–µ—Ä –æ–±–ª–∞—Å—Ç–∏ (¬±–º)", 1.0, 10.0, 3.0, key="multi_boundary")
        restitution = st.slider("–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è", 0.0, 1.0, 1.0, key="multi_rest")
        total_time = st.slider("–í—Ä–µ–º—è (—Å–µ–∫)", 0.1, float(MAX_REASONABLE_TIME), 8.0, key="multi_time")
    
    if st.button("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–∏–º—É–ª—è—Ü–∏—é", type="primary", key="multi_run"):
        run_simulation_multiball(n_balls, mass, radius, friction, boundary, restitution, total_time)


def run_simulation_incline(mass, radius, angle, friction, total_time):
    with st.spinner("‚è≥ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Å–∏–º—É–ª—è—Ü–∏—è..."):
        ball = Ball(mass, radius, [0, 0], [0, 0], [0, 0, 0])
        surface = Surface(friction_coeff=friction, angle=angle)
        sim = Simulation(ball, surface, dt=0.01, total_time=total_time)
        sim.run()
        
        results = sim.get_results()
        
        st.success("‚úÖ –°–∏–º—É–ª—è—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        
        col1, col2, col3 = st.columns(3)
        with col1:
            st.metric("–ö–æ–Ω–µ—á–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å", f"{np.linalg.norm(results['velocity'][-1]):.2f} –º/—Å")
        with col2:
            st.metric("–ü—Ä–æ–π–¥–µ–Ω–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ", f"{results['position'][-1][0]:.2f} –º")
        with col3:
            energy_conserved = "‚úÖ –î–∞" if sim.check_energy_conservation() else "‚ùå –ù–µ—Ç"
            st.metric("–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —ç–Ω–µ—Ä–≥–∏–∏", energy_conserved)
        
        if any(results['is_slipping']):
            st.warning("‚ö†Ô∏è –ë—ã–ª –ø–µ—Ä–µ—Ö–æ–¥ –≤ —Ä–µ–∂–∏–º –ø—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏—è!")
        else:
            st.success("‚úÖ –ö–∞—á–µ–Ω–∏–µ –±–µ–∑ –ø—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏—è")
        
        display_plots(results, mass, radius, angle, "incline")


def run_simulation_slipping(mass, radius, angle, friction, total_time):
    with st.spinner("‚è≥ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Å–∏–º—É–ª—è—Ü–∏—è..."):
        ball = Ball(mass, radius, [0, 0], [0, 0], [0, 0, 0])
        surface = Surface(friction_coeff=friction, angle=angle)
        sim = Simulation(ball, surface, dt=0.01, total_time=total_time)
        sim.run()
        
        results = sim.get_results()
        
        st.success("‚úÖ –°–∏–º—É–ª—è—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        
        slipping_count = np.sum(results['is_slipping'])
        total_count = len(results['is_slipping'])
        slipping_percent = (slipping_count / total_count) * 100 if total_count > 0 else 0
        
        col1, col2, col3 = st.columns(3)
        with col1:
            st.metric("–ö–æ–Ω–µ—á–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å", f"{np.linalg.norm(results['velocity'][-1]):.2f} –º/—Å")
        with col2:
            st.metric("–ü—Ä–æ–π–¥–µ–Ω–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ", f"{results['position'][-1][0]:.2f} –º")
        with col3:
            st.metric("–ü—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏–µ", f"{slipping_percent:.1f}% –≤—Ä–µ–º–µ–Ω–∏")
        
        if slipping_count > 0:
            st.warning(f"‚ö†Ô∏è –ü—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏–µ: {slipping_percent:.1f}% –≤—Ä–µ–º–µ–Ω–∏")
        else:
            st.success("‚úÖ –ö–∞—á–µ–Ω–∏–µ –±–µ–∑ –ø—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏—è")
        
        display_plots(results, mass, radius, angle, "slipping")


def run_simulation_horizontal(mass, radius, vx, vy, friction, total_time):
    with st.spinner("‚è≥ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Å–∏–º—É–ª—è—Ü–∏—è..."):
        wx = 0.0
        wy = -vx / radius if radius > 0 else 0.0
        
        ball = Ball(mass, radius, [0, 0], [vx, vy], [wx, wy, 0.0])
        surface = Surface(friction_coeff=friction, angle=0.0)
        sim = Simulation(ball, surface, dt=0.01, total_time=total_time)
        sim.run()
        
        results = sim.get_results()
        
        st.success("‚úÖ –°–∏–º—É–ª—è—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        
        v_initial = abs(vx)
        v_final = np.linalg.norm(results['velocity'][-1])
        distance = np.linalg.norm(results['position'][-1] - results['position'][0])
        
        col1, col2, col3 = st.columns(3)
        with col1:
            st.metric("–ù–∞—á–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å", f"{v_initial:.2f} –º/—Å")
        with col2:
            st.metric("–ö–æ–Ω–µ—á–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å", f"{v_final:.2f} –º/—Å")
        with col3:
            st.metric("–ü—Ä–æ–π–¥–µ–Ω–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ", f"{distance:.2f} –º")
        
        display_plots(results, mass, radius, 0.0, "horizontal")


def run_simulation_walls(mass, radius, vx, vy, friction, boundary, walls, restitution, total_time):
    with st.spinner("‚è≥ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Å–∏–º—É–ª—è—Ü–∏—è..."):
        wx = 0.0
        wy = -vx / radius if radius > 0 else 0.0
        
        ball = Ball(mass, radius, [0, 0], [vx, vy], [wx, wy, 0.0])
        surface = Surface(friction_coeff=friction, angle=0.0, bounds=[-boundary, boundary, -boundary, boundary])
        sim = Simulation(ball, surface, dt=0.01, total_time=total_time)
        sim.run(walls=walls, restitution=restitution)
        
        results = sim.get_results()
        
        st.success("‚úÖ –°–∏–º—É–ª—è—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        
        E_initial = results['energy'][0]
        E_final = results['energy'][-1]
        energy_loss = (1 - E_final/E_initial)*100 if E_initial > 0 else 0
        
        col1, col2, col3 = st.columns(3)
        with col1:
            st.metric("–ù–∞—á–∞–ª—å–Ω–∞—è —ç–Ω–µ—Ä–≥–∏—è", f"{E_initial:.3f} –î–∂")
        with col2:
            st.metric("–ö–æ–Ω–µ—á–Ω–∞—è —ç–Ω–µ—Ä–≥–∏—è", f"{E_final:.3f} –î–∂")
        with col3:
            st.metric("–ü–æ—Ç–µ—Ä—è —ç–Ω–µ—Ä–≥–∏–∏", f"{energy_loss:.1f}%")
        
        display_plots(results, mass, radius, 0.0, "walls", walls=walls)


def run_simulation_multiball(n_balls, mass, radius, friction, boundary, restitution, total_time):
    with st.spinner("‚è≥ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Å–∏–º—É–ª—è—Ü–∏—è..."):
        balls = []
        
        for i in range(n_balls):
            x = (i - n_balls//2) * 0.5
            vx = 1.0 if i % 2 == 0 else -1.0
            ball = Ball(mass, radius, [x, 0], [vx, 0], [0, 0, 0])
            balls.append(ball)
        
        surface = Surface(friction_coeff=friction, angle=0.0)
        
        walls = [
            {'position': boundary, 'axis': 0},
            {'position': -boundary, 'axis': 0},
            {'position': boundary, 'axis': 1},
            {'position': -boundary, 'axis': 1}
        ]
        
        sim = MultiballSimulation(balls, surface, dt=0.01, total_time=total_time)
        sim.run(walls=walls, restitution=restitution)
        
        results = sim.get_results()
        
        st.success("‚úÖ –°–∏–º—É–ª—è—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        st.metric("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞—Ä–æ–≤", n_balls)
        
        fig, ax = plt.subplots(figsize=(10, 8))
        
        colors = plt.cm.rainbow(np.linspace(0, 1, n_balls))
        for i, positions in enumerate(results['positions']):
            ax.plot(positions[:, 0], positions[:, 1], 
                   label=f'–®–∞—Ä {i+1}', color=colors[i], alpha=0.7)
            ax.plot(positions[0, 0], positions[0, 1], 'o', color=colors[i], markersize=10)
        
        ax.axvline(x=boundary, color='gray', linewidth=2, linestyle='--')
        ax.axvline(x=-boundary, color='gray', linewidth=2, linestyle='--')
        ax.axhline(y=boundary, color='gray', linewidth=2, linestyle='--')
        ax.axhline(y=-boundary, color='gray', linewidth=2, linestyle='--')
        
        ax.set_xlabel('X (–º)', fontsize=12)
        ax.set_ylabel('Y (–º)', fontsize=12)
        ax.set_title('–¢—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏ —à–∞—Ä–æ–≤', fontsize=14)
        ax.grid(True, alpha=0.3)
        ax.legend()
        ax.axis('equal')
        
        st.pyplot(fig)
        plt.close()


def display_plots(results, mass, radius, angle, prefix, walls=None):
    st.subheader("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–∏–º—É–ª—è—Ü–∏–∏")
    
    tab1, tab2, tab3, tab4, tab5, tab6 = st.tabs(["–¢—Ä–∞–µ–∫—Ç–æ—Ä–∏—è", "–≠–Ω–µ—Ä–≥–∏—è", "–°–∫–æ—Ä–æ—Å—Ç—å", "–£–≥–ª–æ–≤–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å", "–†–µ–∂–∏–º—ã", "üé¨ –ê–Ω–∏–º–∞—Ü–∏—è"])
    
    with tab1:
        fig = plot_trajectory(results, surface_angle=angle)
        st.pyplot(fig)
        plt.close()
    
    with tab2:
        fig = plot_energy(results, mass, surface_angle=angle)
        st.pyplot(fig)
        plt.close()
    
    with tab3:
        fig = plot_velocity(results)
        st.pyplot(fig)
        plt.close()
    
    with tab4:
        fig = plot_angular_velocity(results)
        st.pyplot(fig)
        plt.close()
    
    with tab5:
        if 'is_slipping' in results:
            fig = plot_slipping_regions(results)
            st.pyplot(fig)
            plt.close()
        else:
            st.info("–î–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
    
    with tab6:
        st.info("üé¨ –°–æ–∑–¥–∞–Ω–∏–µ –∞–Ω–∏–º–∞—Ü–∏–∏ (–º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥)...")
        show_animation(results, radius, angle, walls)


if __name__ == "__main__":
    main()

